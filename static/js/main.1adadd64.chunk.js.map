{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","tasks","setTasks","useState","taskInput","setTaskInput","priority","setPriority","editMode","setEditMode","editTaskText","setEditTaskText","filter","setFilter","darkMode","setDarkMode","useEffect","savedTasks","JSON","parse","localStorage","getItem","savedDarkMode","setItem","stringify","filteredTasks","task","completed","React","createElement","className","concat","onClick","toggleDarkMode","type","value","onChange","e","target","placeholder","handleAddTask","text","id","Date","now","index","updatedTasks","handleSaveEdit","findIndex","map","key","toggleTaskCompletion","handleEditTask","_","i","handleDeleteTask","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.1adadd64.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const [tasks, setTasks] = useState([]);\r\n  const [taskInput, setTaskInput] = useState('');\r\n  const [priority, setPriority] = useState('Medium');\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [editTaskText, setEditTaskText] = useState('');\r\n  const [filter, setFilter] = useState('all');\r\n  const [darkMode, setDarkMode] = useState(false);\r\n\r\n  // Load tasks from localStorage on initial render\r\n  useEffect(() => {\r\n    const savedTasks = JSON.parse(localStorage.getItem('tasks'));\r\n    if (savedTasks) setTasks(savedTasks);\r\n\r\n    // Load dark mode preference from localStorage\r\n    const savedDarkMode = JSON.parse(localStorage.getItem('darkMode'));\r\n    if (savedDarkMode !== null) {\r\n      setDarkMode(savedDarkMode);\r\n    }\r\n  }, []);\r\n\r\n  // Save tasks to localStorage whenever tasks change\r\n  useEffect(() => {\r\n    localStorage.setItem('tasks', JSON.stringify(tasks));\r\n  }, [tasks]);\r\n\r\n  // Save dark mode preference to localStorage\r\n  useEffect(() => {\r\n    localStorage.setItem('darkMode', JSON.stringify(darkMode));\r\n  }, [darkMode]);\r\n\r\n  const handleAddTask = () => {\r\n    if (taskInput) {\r\n      setTasks([\r\n        ...tasks,\r\n        { text: taskInput, completed: false, priority, id: Date.now() },\r\n      ]);\r\n      setTaskInput('');\r\n    }\r\n  };\r\n\r\n  const handleEditTask = (index) => {\r\n    setEditMode(true);\r\n    setEditTaskText(tasks[index].text);\r\n  };\r\n\r\n  const handleSaveEdit = (index) => {\r\n    const updatedTasks = [...tasks];\r\n    updatedTasks[index].text = editTaskText;\r\n    setTasks(updatedTasks);\r\n    setEditMode(false);\r\n  };\r\n\r\n  const toggleTaskCompletion = (index) => {\r\n    const updatedTasks = [...tasks];\r\n    updatedTasks[index].completed = !updatedTasks[index].completed;\r\n    setTasks(updatedTasks);\r\n  };\r\n\r\n  const handleDeleteTask = (index) => {\r\n    const updatedTasks = tasks.filter((_, i) => i !== index);\r\n    setTasks(updatedTasks);\r\n  };\r\n\r\n  const filteredTasks = tasks.filter((task) => {\r\n    if (filter === 'completed') return task.completed;\r\n    if (filter === 'pending') return !task.completed;\r\n    return true; // 'all' filter\r\n  });\r\n\r\n  const toggleDarkMode = () => {\r\n    setDarkMode(!darkMode);\r\n  };\r\n\r\n  return (\r\n    <div className={`App ${darkMode ? 'dark' : 'light'}`}>\r\n      <h1>To-Do List</h1>\r\n\r\n      <button onClick={toggleDarkMode} className=\"toggle-dark-mode\">\r\n        Toggle Dark Mode\r\n      </button>\r\n\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          value={taskInput}\r\n          onChange={(e) => setTaskInput(e.target.value)}\r\n          placeholder=\"Add a new task\"\r\n        />\r\n        <select value={priority} onChange={(e) => setPriority(e.target.value)}>\r\n          <option value=\"Low\">Low</option>\r\n          <option value=\"Medium\">Medium</option>\r\n          <option value=\"High\">High</option>\r\n        </select>\r\n        <button onClick={handleAddTask}>Add Task</button>\r\n      </div>\r\n\r\n      {editMode && (\r\n        <div>\r\n          <input\r\n            type=\"text\"\r\n            value={editTaskText}\r\n            onChange={(e) => setEditTaskText(e.target.value)}\r\n          />\r\n          <button\r\n            onClick={() =>\r\n              handleSaveEdit(tasks.findIndex((task) => task.text === editTaskText))\r\n            }\r\n          >\r\n            Save Edit\r\n          </button>\r\n        </div>\r\n      )}\r\n\r\n      <div>\r\n        <button onClick={() => setFilter('all')}>All</button>\r\n        <button onClick={() => setFilter('completed')}>Completed</button>\r\n        <button onClick={() => setFilter('pending')}>Pending</button>\r\n      </div>\r\n\r\n      <div className=\"task-list\">\r\n        {filteredTasks.map((task, index) => (\r\n          <div key={task.id} className=\"todo-item\">\r\n            <span\r\n              onClick={() => toggleTaskCompletion(index)}\r\n              className={task.completed ? 'completed' : ''}\r\n            >\r\n              {task.text}\r\n            </span>\r\n            <div>\r\n              <button\r\n                className=\"edit-btn\"\r\n                onClick={() => handleEditTask(index)}\r\n              >\r\n                Edit\r\n              </button>\r\n              <button\r\n                onClick={() => handleDeleteTask(index)}\r\n                className=\"delete-btn\"\r\n              >\r\n                Delete\r\n              </button>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}